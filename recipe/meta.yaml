{% set version = "1.0.3" %}

package:
  name: codec2-split
  version: {{ version }}

source:
  url: https://github.com/drowe67/codec2-dev/archive/refs/tags/v{{ version }}.tar.gz
  sha256: 4a20f3032eb2dc073c73df6b252002817e920ae19991a5e497dd3eb6c24f9ec9
  patches:
    - 0001-Fix-CMake-include-of-GetPrerequisites.patch
    - 0002-Add-optional-installation-of-command-line-programs.patch

build:
  number: 1

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}  # [not win]
    - {{ stdlib('c') }}
    - cmake
    - ninja

outputs:
  - name: libcodec2
    script: install_libcodec2.bat  # [win]
    script: install_libcodec2.sh  # [not win]
    build:
      run_exports:
        - {{ pin_subpackage('libcodec2', max_pin='x.x') }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ stdlib('c') }}
        - cmake
        - ninja
    test:
      commands:
        # verify that (some) headers get installed
        - test -f $PREFIX/include/codec2/codec2.h  # [not win]
        - test -f $PREFIX/include/codec2/version.h  # [not win]
        - if not exist %PREFIX%\\Library\\include\\codec2\\codec2.h exit 1  # [win]
        - if not exist %PREFIX%\\Library\\include\\codec2\\version.h exit 1  # [win]

        # verify that libraries get installed
        - test -f $PREFIX/lib/libcodec2${SHLIB_EXT}  # [not win]
        - if not exist %PREFIX%\\Library\\bin\\libcodec2.dll exit 1  # [win]
        - if not exist %PREFIX%\\Library\\lib\\libcodec2.dll.a exit 1  # [win]
        - if not exist %PREFIX%\\Library\\lib\\libcodec2.lib exit 1  # [win]

  - name: codec2
    script: install_codec2.bat  # [win]
    script: install_codec2.sh  # [not win]
    build:
      run_exports:
        - {{ pin_subpackage('libcodec2', max_pin='x.x') }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ stdlib('c') }}
        - cmake
        - ninja
      host:
        - libcodec2
      run:
        - {{ pin_subpackage('libcodec2', exact=True) }}
    test:
      commands:
        # verify that executables can be run
        # don't test ofdm_demod, ofdm_mod, and tollr
        # because they don't conform to the pattern (print usage, return 1)
        {% set cmds = ["c2dec", "c2enc", "c2sim", "cohpsk_ch", "cohpsk_demod"] %}
        {% set cmds = cmds + ["cohpsk_get_test_bits", "cohpsk_mod", "cohpsk_put_test_bits"] %}
        {% set cmds = cmds + ["deframer", "fdmdv_channel", "fdmdv_demod"] %}
        {% set cmds = cmds + ["fdmdv_get_test_bits", "fdmdv_mod", "fdmdv_put_test_bits"] %}
        {% set cmds = cmds + ["fm_demod", "fmfsk_demod", "fmfsk_mod", "framer"] %}
        {% set cmds = cmds + ["freedv_data_raw_rx", "freedv_data_raw_tx"] %}
        {% set cmds = cmds + ["freedv_data_rx", "freedv_data_tx"] %}
        {% set cmds = cmds + ["freedv_mixed_rx", "freedv_mixed_tx"] %}
        {% set cmds = cmds + ["freedv_rx", "freedv_tx"] %}
        {% set cmds = cmds + ["fsk_demod", "fsk_get_test_bits", "fsk_mod"] %}
        {% set cmds = cmds + ["fsk_mod_ext_vco", "fsk_put_test_bits", "insert_errors"] %}
        {% set cmds = cmds + ["ldpc_dec", "ldpc_enc", "ldpc_noise"] %}
        {% set cmds = cmds + ["ofdm_get_test_bits", "ofdm_put_test_bits"] %}
        {% set cmds = cmds + ["vhf_deframe_c2", "vhf_frame_c2"] %}
        {% for cmd in cmds %}
        - {{ cmd }} || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi  # [not win]
        - {{ cmd }} || if !ERRORLEVEL! LEQ 1 cmd /c "exit /b 0"  # [win]
        {% endfor %}

about:
  home: http://www.rowetel.com/codec2.html
  license: LGPL-2.1-or-later
  license_family: LGPL
  license_file: COPYING
  summary: An open source low bit rate speech codec
  description: |
    Open source speech codec designed for communications quality speech between 450
    and 3200 bit/s. The main application is low bandwidth HF/VHF digital radio.
  dev_url: https://github.com/drowe67/codec2

extra:
  feedstock-name: codec2
  recipe-maintainers:
    - ryanvolz
